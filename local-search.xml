<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java学习-多线程-01</title>
    <link href="/posts/6646.html"/>
    <url>/posts/6646.html</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习-多线程-01"><a href="#Java学习-多线程-01" class="headerlink" title="Java学习-多线程-01"></a>Java学习-多线程-01</h1><h4 id="1-线程的生命周期、线程有几种状态"><a href="#1-线程的生命周期、线程有几种状态" class="headerlink" title="1.线程的生命周期、线程有几种状态"></a>1.线程的生命周期、线程有几种状态</h4><p><strong>生命周期：</strong></p><ol><li>初始化(NEW)</li><li>运行(RUNNABLE)</li><li>阻塞(BLOCKED)</li><li>等待(WAITING)</li><li>有时限等待(TIMED_WAITING)</li><li>死亡(TERMINATED)</li></ol><p><strong>线程状态：</strong><br>有6个状态：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Thread.State 源码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">State</span> &#123;<br>    NEW,<br>    RUNNABLE,<br>    BLOCKED,<br>    WAITING,<br>    TIMED_WAITING,<br>    TERMINATED;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为阻塞(BLOCKED)、等待(WAITING)、有时限等待(TIMED_WAITING)三种状态都是阻塞状态,没有CPU的使用权，所以可以用下图表示:</p><p><img src="/../imgs/6646/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"></p><hr><h4 id="2-sleep-、wait-、join-、yield-区别"><a href="#2-sleep-、wait-、join-、yield-区别" class="headerlink" title="2.sleep()、wait()、join()、yield()区别"></a>2.sleep()、wait()、join()、yield()区别</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-JVM-01</title>
    <link href="/posts/3217.html"/>
    <url>/posts/3217.html</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习-JVM-01"><a href="#Java学习-JVM-01" class="headerlink" title="Java学习-JVM-01"></a>Java学习-JVM-01</h1><h4 id="1-Java类加载器"><a href="#1-Java类加载器" class="headerlink" title="1.Java类加载器"></a>1.Java类加载器</h4><p>类加载器就是加载所有类的工具，它加载的类在内存中只有一份，所以类加载器是单例的。也就是堆中的Class对象不可以重复加载</p><p>主要有以下四类：</p><ul><li><p>BootstrapClassLoader 启动类加载器：<br>加载&#x2F;lib下的jar包和类。由C++编写。</p></li><li><p>ExtenssionClassLoader 扩展类加载器：<br>加载&#x2F;lib&#x2F;ext下的jar包和类。由Java编写。</p></li><li><p>AppClassLoader 应用类加载器：<br>加载当前classPath下的jar包和类。由Java编写。</p></li><li><p>自定义类加载器：<br>通过继承<code>java.lang.ClassLoader</code>类，实现自定义类加载器。</p></li></ul><p><img src="/../imgs/3217/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png"></p><hr><h4 id="2-双亲委派模型"><a href="#2-双亲委派模型" class="headerlink" title="2.双亲委派模型"></a>2.双亲委派模型</h4><p>当类加载器收到一个类的加载请求时，它首先不会自己尝试去加载它，而是把这个请求委托给父类加载器去完成，这样层层委派，因此所有的加载请求最终都会传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求时，子加载器才会自己尝试去加载。</p><p>双亲委派模型的具体实现代码在 <code>java.lang.ClassLoader</code> 类中。此类的 <code>loadClass()</code> 方法是双亲委派模型的核心：先检查类是否已经加载过，如果没有则让父类加载器去加载。当父类加载器加载失败时会抛出 <code>ClassNotFoundException</code> 异常,此时再自己尝试加载。</p><p>如果没有双亲委派模型，而是由各个类加载器自行加载的话，内存里面可能会出现很多个相同的类，那么类之间的比较结果及类的唯一性将无法保证。</p><hr><h4 id="3-GC如何判断对象可以被回收"><a href="#3-GC如何判断对象可以被回收" class="headerlink" title="3.GC如何判断对象可以被回收"></a>3.GC如何判断对象可以被回收</h4><ul><li><p>引用计数法：<br>设置引用计数器，对象被引用时计数器加1，引用失效时计数器减1，当计数器为0时，对象可以被回收。会存在对象间循环引用的问题，一般不使用这种方法。</p></li><li><p>可达性分析：<br>通过GC Roots 的根对象作为起始节点，从这些节点开始，根据引用关系向下搜索，如果某个对象没有被搜索到，则会被标记为垃圾。可作为GC Roots的对象有：</p><ol><li>虚拟机栈和本地方法栈中引用的对象</li><li>类静态属性引用的对象</li><li>常量引用的对象</li></ol></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-基础-02</title>
    <link href="/posts/30825.html"/>
    <url>/posts/30825.html</url>
    
    <content type="html"><![CDATA[<h1 id="Java-学习-基础-02"><a href="#Java-学习-基础-02" class="headerlink" title="Java 学习-基础-02"></a>Java 学习-基础-02</h1><h4 id="11-什么是字节码？采用字节码的好处是什么"><a href="#11-什么是字节码？采用字节码的好处是什么" class="headerlink" title="11.什么是字节码？采用字节码的好处是什么"></a>11.什么是字节码？采用字节码的好处是什么</h4><ul><li><p>字节码：<br>Java 引入了虚拟机的概念，即在机器和 <strong>编译程序</strong> 之间，加入了一层抽象的虚拟机。 <strong>编译程序</strong> 只需面向虚拟机，生成虚拟机能理解的代码，然后由解释器将虚拟机代码转换成特定的机器代码来执行。这种虚拟机能理解的代码就是 <strong><em>字节码</em></strong> 。（即扩展名为 <code>.class</code> 的文件）。</p></li><li><p>采用字节码的好处：</p><ul><li>编译型语言效率比解释型语言高</li><li>字节码面向虚拟机，不针对任一操作系统，可以在任何操作系统上运行</li><li>在编译期间，编译器可以检查代码的正确性，并且可以提供更多的信息</li></ul></li></ul><hr><h4 id="12-Java-中的异常体系"><a href="#12-Java-中的异常体系" class="headerlink" title="12.Java 中的异常体系"></a>12.Java 中的异常体系</h4><p><strong>体系图</strong></p><p><img src="/../imgs/30825/%E4%BD%93%E7%B3%BB%E5%9B%BE.png"></p><p>Java 异常分为 **<em>Error（程序无法处理的错误）</em>**，和 **<em>Exception（程序本身可以处理的异常）</em>**。 这两类均继承 Throwable</p><p><strong>Error</strong> 常见的有 StackOverFlowError、OutOfMemoryError 等等。<br><strong>Exception</strong> 分为 <strong><em>运行时异常</em></strong> 和 <strong><em>编译时异常</em></strong> 。</p><ul><li><strong><em>运行时异常</em></strong><br>可以利用 <code>try catch</code> 捕获，也可以通过 <code>throws</code> 来声明。</li></ul><p>RuntimeException 是运行期异常，可以被捕获和处理。常见的 RuntimeException 有：</p><ul><li>NullPointerException 空指针异常</li><li>ArrayIndexOutOfBoundsException 数组越界异常</li><li>ArithmeticException 除数为 0 异常</li><li>ClassCastException 类型强制转换异常</li></ul><p><strong><em>编译时异常</em></strong> 必须处理，不处理的话，编译器会报错。<br>除 RuntimeException 以外的异常，都是编译时异常。在编译阶段 Java 编译器会检查此类异常并强制程序捕获和处理异常，即强制要求程序在可能出现此类异常的地方进行捕获和处理。常见的有：</p><ul><li>IOException 输入输出异常</li><li>InterruptedException 线程中断异常</li><li>ClassNotFoundException 类未找到异常</li><li>NoSuchMethodException 方法未找到异常</li><li>SQLException SQL 异常</li></ul><p><strong>throw和throws的区别</strong></p><ul><li>throw 一般是用在方法体内部，由开发者定义当程序语句出现问题后，抛出异常</li><li>throws 一般用于方法声明上，代表该方法可能会抛出的异常列表</li></ul><hr><h4 id="13"><a href="#13" class="headerlink" title="13"></a>13</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-集合-01</title>
    <link href="/posts/10146.html"/>
    <url>/posts/10146.html</url>
    
    <content type="html"><![CDATA[<h1 id="Java-学习-集合-01"><a href="#Java-学习-集合-01" class="headerlink" title="Java 学习-集合-01"></a>Java 学习-集合-01</h1><h4 id="1-List、Set、Map-的区别"><a href="#1-List、Set、Map-的区别" class="headerlink" title="1.List、Set、Map 的区别"></a>1.List、Set、Map 的区别</h4><table>    <tr>      <th colspan=2></th>      <th>元素有序</th>      <th>允许重复元素</th>    </tr>    <tr>      <td colspan=2>List</td>      <td>是</td>      <td>是</td>    </tr>    <tr>      <td rowspan=3>Set</td>      <td>AbstractSet</td>      <td rowspan=2>否</td>      <td rowspan=3>否</td>    </tr>    <tr>      <td>HashSet</td>    </tr>    <tr>      <td>TreeSet</td>      <td>是（用二叉树排序）</td>    </tr>    <tr>      <td rowspan=3>Map</td>      <td>AbstractMap</td>      <td rowspan=2>否</td>      <td rowspan=3>Key值必须唯一，Value可重复</td>    </tr>    <tr>      <td>HashMap</td>    </tr>    <tr>      <td>TreeMap</td>      <td>是（用二叉树排序）</td>    </tr>  </table><hr><h4 id="2-ArrayList-和-LinkedList-的区别"><a href="#2-ArrayList-和-LinkedList-的区别" class="headerlink" title="2.ArrayList 和 LinkedList 的区别"></a>2.ArrayList 和 LinkedList 的区别</h4><ul><li><strong>数据结构实现:</strong><br>ArrayList 是 <strong><em>动态数组</em></strong> 的数据结构实现；LinkedList 是 <strong><em>双向链表</em></strong> 的数据结构实现</li><li><strong>随机访问效率:</strong><br>ArrayList 比 LinkedList 快，因为 ArrayList 是动态数组，每次查询都会查询整个数组，而 LinkedList 是双向链表，是线性的数据存储方式，需要移动指针从前往后一次查找</li><li><strong>增加和删除效率:</strong><br>在首位的增加和删除操作，LinkedList 要比 ArrayList 效率高，因为 ArrayList 增删操作要影响数组内其他数据的下标，而 LinkedList 只需要移动指针即可</li></ul><hr><h4 id="3-HashMap-和-HashTable-有什么区别，其底层实现是什么"><a href="#3-HashMap-和-HashTable-有什么区别，其底层实现是什么" class="headerlink" title="3.HashMap 和 HashTable 有什么区别，其底层实现是什么"></a>3.HashMap 和 HashTable 有什么区别，其底层实现是什么</h4><ul><li><strong>线程安全：</strong><br>HashMap 非线程安全，HashTable 内部方法有 synchronized 处理是线程安全，但要保证线程安全，推荐使用 ConcurrentHashMap</li><li><strong>效率：</strong><br>由于线程安全问题，HashMap 比 HashTable 效率高,HashTable 基本被淘汰</li><li><strong>对 Null key 和 Null value 的支持：</strong><br>HashMap 支持 Null key 和 Null value；HashTable 不支持，会跑出空指针异常</li><li><strong>底层实现原理</strong><br>HashMap1.7 是数组+链表，1.8 是数组+链表+红黑树<br>HashTable 是数组+链表</li></ul><hr><h4 id="4-ConcurrentHashMap-原理，jdk7-和-jdk8-的区别"><a href="#4-ConcurrentHashMap-原理，jdk7-和-jdk8-的区别" class="headerlink" title="4.ConcurrentHashMap 原理，jdk7 和 jdk8 的区别"></a>4.ConcurrentHashMap 原理，jdk7 和 jdk8 的区别</h4><ul><li><strong>原理：</strong><br>JDK1.7版本，ConcurrentHashMap内部使用 <em><strong>段（Segment）</strong></em> ，ConcurrentLevel有16个分段，这16个分段有独立的锁机制，每个独立的机制都是一张表，表的下面是链表，这样就可以支持并发的同时保证每张表的线程安全，提高效率</li></ul><p>JDK1.8版本，ConcurrentHashMap内部使用synchronized + volatile + CAS 的实现，降低锁的粒度，提高效率</p><ul><li><strong>区别：</strong><ul><li>JDK1.8的实现降低锁的粒度，JDK1.7版本锁的粒度是基于Segment的，包含多个HashEntry，而JDK1.8锁的粒度就是HashEntry（首节点）</li><li>JDK1.8版本的数据结构变得更加简单，使得操作更加清晰流畅。因为已经使用synchronized来进行同步，所以不需要分段锁的概念，也就不需要Segment这种数据结构，由于粒度的降低，实现的复杂度也增加了</li><li>JDK1.8使用红黑树来优化链表，基于长度很长的链表的遍历是一个很漫长的过程，而红黑树的遍历效率是很快的，代替一定阈值的链表，这样效率更高</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>学习</tag>
      
      <tag>八股文</tag>
      
      <tag>集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo文章的相关操作</title>
    <link href="/posts/60892.html"/>
    <url>/posts/60892.html</url>
    
    <content type="html"><![CDATA[<h3 id="传统创建文章的方式"><a href="#传统创建文章的方式" class="headerlink" title="传统创建文章的方式"></a>传统创建文章的方式</h3><figure class="highlight gauss"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="创建草稿"><a href="#创建草稿" class="headerlink" title="创建草稿"></a>创建草稿</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> draft &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="预览草稿"><a href="#预览草稿" class="headerlink" title="预览草稿"></a>预览草稿</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">hexo s <span class="hljs-comment">--draft</span><br></code></pre></td></tr></table></figure><h3 id="发布草稿"><a href="#发布草稿" class="headerlink" title="发布草稿"></a>发布草稿</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">hexo P <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="生产静态文件"><a href="#生产静态文件" class="headerlink" title="生产静态文件"></a>生产静态文件</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br></code></pre></td></tr></table></figure><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>草稿</tag>
      
      <tag>发布</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-基础</title>
    <link href="/posts/60906.html"/>
    <url>/posts/60906.html</url>
    
    <content type="html"><![CDATA[<h1 id="Java-学习-基础-01"><a href="#Java-学习-基础-01" class="headerlink" title="Java 学习-基础-01"></a>Java 学习-基础-01</h1><h4 id="1-什么是面向对象，面向对象和面向过程的区别"><a href="#1-什么是面向对象，面向对象和面向过程的区别" class="headerlink" title="1. 什么是面向对象，面向对象和面向过程的区别"></a>1. 什么是面向对象，面向对象和面向过程的区别</h4><p>面向对象和面向过程都是一种软件开发思想。</p><p><strong>什么是面向对象：</strong> 面向对象是把构成问题事物分解成各个对象，分别设计这些对象，然后将它们组装成完整功能的系统。</p><p><strong>区别：</strong> 面向过程分析出解决问题的步骤，用函数按步骤实现，使用时依次调用就函数；面向对象时用类实现各个功能模块。</p><hr><h4 id="2-面向对象三大特性"><a href="#2-面向对象三大特性" class="headerlink" title="2.面向对象三大特性"></a>2.面向对象三大特性</h4><ul><li><a href="######%E5%B0%81%E8%A3%85">封装</a></li><li><a href="######%E7%BB%A7%E6%89%BF">继承</a></li><li><a href="######%E5%A4%9A%E6%80%81">多态</a></li></ul><h6 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h6><p>利用 <strong>抽象数据类型</strong> 将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在 <strong>抽象数据类型</strong> 的内部，尽可能地隐藏内部细节，只保留一些对外接口使之与外部发生联系。用户无需知道对象内部的细节，但可以通过对象对外提供的接口访问该对象。</p><p><strong><em>优点：</em></strong></p><ul><li>减少耦合：可以独立地开发、测试、优化、使用、理解和修改</li><li>减轻维护的负担：可以更容易被程序员理解，并且在调试的时候可以不影响其他模块</li><li>有效的调节性能：可以通过剖析确定哪些模块影响了系统的性能</li><li>提高软件的可重用性</li><li>降低了构建大型系统的风险：即使整个系统不可用，但是这些独立的模块却有可能是可用的</li></ul><h6 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h6><p>继承就是子类继承父类的特征和行为，使得子类（派生类）可以从父类（基类）继承特征和行为，从而使得子类（派生类）可以复用父类（基类）的代码。</p><figure class="highlight csharp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//  父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;吃东西&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//  子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-title">extend</span> <span class="hljs-title">Animal</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;猫吃东西&quot;</span>);<br>    &#125;<br>&#125;<br><br>Anilmal animal = <span class="hljs-keyword">new</span> Cat();<br><br></code></pre></td></tr></table></figure><p><strong>继承的特性</strong></p><ul><li>子类拥有父类非私有的属性和方法</li><li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展</li><li>子类可以用自己的方式实现父类的方法，即子类可以覆盖父类的方法</li><li>子类可以继承父类的构造函数，子类可以用自己的构造函数来覆盖父类的构造函数</li><li>Java 的继承是单继承</li><li>提高了类之间的耦合度，使得类之间的关系更加清晰</li></ul><h6 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h6><p>多态分为<strong>编译时多态</strong>和<strong>运行时多态</strong></p><ul><li>编译时多态主要指方法的重载，即方法的重写</li><li>运行时多态，指的是程序中定义的对象引用所指向的具体类型，在运行期间才确定。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;吃东西&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//  子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> extend Animal&#123;<br>    <span class="hljs-comment">//  编译时多态</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫吃东西&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">Anilmal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br><span class="hljs-comment">//  运行时多态</span><br>animal.eat();<br><br></code></pre></td></tr></table></figure><hr><h4 id="3-JDK-JRE-JVM"><a href="#3-JDK-JRE-JVM" class="headerlink" title="3.JDK JRE JVM"></a>3.JDK JRE JVM</h4><p><strong><em>JDK</em></strong> Java Development Kit,即 Java 开发工具包，用于编译 Java 程序<br><strong><em>JRE</em></strong> Java Runtime Environment,即 Java 运行环境，用于运行 Java 程序<br><strong><em>JVM</em></strong> Java Virtual Machine,即 Java 虚拟机,是 Java 实现跨平台最核心的部分。用于运行 Java 程序。</p><hr><h4 id="4-x3D-x3D-和-equals-比较"><a href="#4-x3D-x3D-和-equals-比较" class="headerlink" title="4.&#x3D;&#x3D;和 equals 比较"></a>4.&#x3D;&#x3D;和 equals 比较</h4><p>&#x3D;&#x3D; 对于基本类型是值的比较，对于引用类型是地址的比较<br>equals 默认是引用比较，但很多类会重写 equals 方法，使之成为值的比较，如 String，Integer，Double 等。</p><hr><h4 id="5-hashCode-和-equals"><a href="#5-hashCode-和-equals" class="headerlink" title="5.hashCode 和 equals"></a>5.hashCode 和 equals</h4><p>结论：</p><ul><li>hashCode 相等，equals 不一定相等</li><li>hashCode 不相等，equals 一定不相等</li><li>equals 相等，hashCode 一定相等</li><li>equals 不相等，hashCode 一定不相等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">aInt</span> <span class="hljs-operator">=</span> <span class="hljs-number">97</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">aStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<br><br>System.out.println(aInt.hashCode());<br>System.out.println(aStr.hashCode());<br><br></code></pre></td></tr></table></figure><p>输出值都是 <code>97</code></p><p><strong>重写 equals 必须重写 hashCode</strong>:需要遵循 <strong>equals 相等，hashCode 一定相等</strong></p><hr><h4 id="6-final"><a href="#6-final" class="headerlink" title="6.final"></a>6.final</h4><ul><li>final 关键字，用于修饰类，方法，属性，变量，表达式，类型等</li><li>final 修饰的累叫做<strong>最终类</strong>，该累不能被继承（String）</li><li>final 修饰的方法不能被重写</li><li>final 修饰的变量叫常量，必须初始化，不能被修改</li></ul><hr><h4 id="7-String、StringBuffer、StringBuilder"><a href="#7-String、StringBuffer、StringBuilder" class="headerlink" title="7.String、StringBuffer、StringBuilder"></a>7.String、StringBuffer、StringBuilder</h4><p>String: 字符串类，用于存储字符串，不可变，线程安全<br>StringBuffer: 字符串缓冲区，用于存储字符串，可变，线程安全<br>StringBuilder: 字符串构造器，用于存储字符串，可变，线程不安全</p><p>StringBuffer 实现方法里，通过使用 Syncronized 来保证线程安全<br>StringBuilder 没有使用 Syncronized，线程不安全</p><hr><h4 id="8-基础数据类型"><a href="#8-基础数据类型" class="headerlink" title="8.基础数据类型"></a>8.基础数据类型</h4><p>基础数据类型: byte, short, int, long, float, double, char, boolean<br>自动转型是从低到高、高到低必须强转。</p><hr><h4 id="9-重载和重写的区别"><a href="#9-重载和重写的区别" class="headerlink" title="9.重载和重写的区别"></a>9.重载和重写的区别</h4><ul><li>重写(Override)：</li></ul><p>方法名相同，方法参数相同，返回类型相同。一个在父类，一个在子类。</p><ul><li>重载(Overload)：</li></ul><p>方法名相同，方法参数不相同，返回值可以不同，用于同一类内。</p><hr><h4 id="10-接口和抽象类的区别"><a href="#10-接口和抽象类的区别" class="headerlink" title="10.接口和抽象类的区别"></a>10.接口和抽象类的区别</h4><p><strong><em>抽象类：</em></strong><br>抽象类是用来描述抽象行为的。比如 Animal，我们并不知道具体会有哪些行为，只有具体的动物，如 Cat、Dog 才具有行为，才能够被实例化。抽象类是<strong>实现多态的一种机制</strong>，它可以包含具体的方法。也可以包含抽象方法，而继承它的子类必须实现这些抽线方法。<br>抽象类具有一下特性：</p><ol><li>抽象类不能被实例化，但可以有构造函数</li><li>抽象方法必须由子类进行重写</li><li>只要包含一个抽象方法，就必须定义为抽象类</li><li>抽象类中可以包含具体的方法，也可以不包含抽象方法</li><li>抽象类可以包含普通的成员变量</li><li>抽象类也可以包含静态成员变量</li><li>子类中的抽象方法，不能与父类的抽象方法相同</li><li>abstract 不能与 private、static、final、native 共同使用</li></ol><p><strong><em>接口：</em></strong><br>接口通过 interface 关键字实现，接口不是类，因此不能实例化。实现类实现接口，必须实现接口所有方法。</p><p>接口是抽象类的延伸，Java 不能多重继承，但是可以多重实现接口。<br>接口有一下特性：</p><ol><li>接口中不能有构造方法</li><li>接口的所有方法自动被声明为 public，而且只能是 public，使用其他会导致编译错误</li><li>接口可以定义“成员变量”，而且会自动转化</li><li>接口所有方法都是抽象的，不能有方法体，也不能包含静态方法</li><li>实现接口的非抽象类必须实现接口的所有方法，而抽象类不用</li><li>不能使用new关键字实例化接口，因为接口是不能实例化的</li><li>在实现多接口的时候，一定要注意方法名的重复，否则会导致编译错误</li></ol><p><em><strong>总结：</strong></em></p><ol><li>抽象类是一种继承管理，一个类只能有一个父类，但可以有多个接口</li><li>在抽象类中可以拥有自己的成员变量和非抽象方法，但接口只能存在静态的不可变的成员数据，切接口的所有方法都是抽象的。</li><li>抽象类和接口所反映的设计理念是不同的。抽象类代表的是“is-a”关系，而接口代表的是“like-a”的关系。</li></ol><hr>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>基础</tag>
      
      <tag>学习</tag>
      
      <tag>八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub Pages + Hexo 搭建</title>
    <link href="/posts/15719.html"/>
    <url>/posts/15719.html</url>
    
    <content type="html"><![CDATA[<h1 id="GitHub-Pages-Hexo-搭建"><a href="#GitHub-Pages-Hexo-搭建" class="headerlink" title="GitHub Pages + Hexo 搭建"></a>GitHub Pages + Hexo 搭建</h1><h2 id="1-GitHub-Pages-部分"><a href="#1-GitHub-Pages-部分" class="headerlink" title="1 GitHub Pages 部分"></a>1 GitHub Pages 部分</h2><p>1.1  新建仓库</p><p><img src="/../imgs/15719/2022-04-13%2016.39.16.png"></p><p><strong>注</strong><br>仓库名称和用户名一样的话，Pages的Url会是 YourName.github.io<br>如果不一样的话，则会是 YourName.github.io&#x2F;仓库名</p><p><strong>要选择Public</strong></p><p>1.2 修改仓库为Pages<br><img src="/../imgs/15719/2022-04-13%2016.41.41.png"></p><p>修改source对应的分支</p><p><img src="/../imgs/15719/2022-04-13%2016.43.50.png"></p><hr><h2 id="2-Hexo"><a href="#2-Hexo" class="headerlink" title="2 Hexo"></a>2 Hexo</h2><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>安装完后，初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init 文件目录<br><span class="hljs-built_in">cd</span> 文件目录<br>yarn<br></code></pre></td></tr></table></figure><h3 id="配置仓库地址"><a href="#配置仓库地址" class="headerlink" title="配置仓库地址"></a>配置仓库地址</h3><p>修改根目录下的  <strong>_config.yml</strong> 文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> 仓库地址<br><span class="hljs-symbol">  branch:</span> 分支<br></code></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-number">1</span> 构建静态文件<br>hexo g<br><br><span class="hljs-number">2</span> 清除本地静态文件<br>hexo <span class="hljs-built_in">clean</span><br><br><span class="hljs-number">3</span> 本地服务<br>hexo s<br><br><span class="hljs-number">4</span> 部署到Pages<br>hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Pages</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World!</title>
    <link href="/posts/22462.html"/>
    <url>/posts/22462.html</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
