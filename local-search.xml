<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java学习-多线程-01</title>
    <link href="/posts/6646.html"/>
    <url>/posts/6646.html</url>
    
    <content type="html"><![CDATA[<h1 id="Java-学习-多线程-01"><a href="#Java-学习-多线程-01" class="headerlink" title="Java 学习-多线程-01"></a>Java 学习-多线程-01</h1><h4 id="1-线程的生命周期、线程有几种状态"><a href="#1-线程的生命周期、线程有几种状态" class="headerlink" title="1.线程的生命周期、线程有几种状态"></a>1.线程的生命周期、线程有几种状态</h4><p><strong>生命周期：</strong></p><ol><li>初始化(NEW)</li><li>运行(RUNNABLE)</li><li>阻塞(BLOCKED)</li><li>等待(WAITING)</li><li>有时限等待(TIMED_WAITING)</li><li>死亡(TERMINATED)</li></ol><p><strong>线程状态：</strong><br>有 6 个状态：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Thread.State 源码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">State</span> &#123;<br>    NEW,<br>    RUNNABLE,<br>    BLOCKED,<br>    WAITING,<br>    TIMED_WAITING,<br>    TERMINATED;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为阻塞(BLOCKED)、等待(WAITING)、有时限等待(TIMED_WAITING)三种状态都是阻塞状态,没有 CPU 的使用权，所以可以用下图表示:</p><p><img src="/../imgs/6646/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"></p><hr><h4 id="2-sleep-、wait-、join-、yield-区别"><a href="#2-sleep-、wait-、join-、yield-区别" class="headerlink" title="2.sleep()、wait()、join()、yield()区别"></a>2.sleep()、wait()、join()、yield()区别</h4><p><img src="/../imgs/6646/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F2.png"><br><strong>sleep</strong></p><ul><li>sleep 方法是 Thread 的静态方法</li><li>sleep 使当前线程进入阻塞状态，在指定时间内不会执行</li><li>sleep 期间，不会释放锁</li></ul><p><strong>wait</strong></p><ul><li>wait 方法是 Object 的非静态方法</li><li>在其他线程调用 notify 或者 notifyAll 方法前，线程释放当前所占用的锁标识</li><li>当前线程必须拥有当前对象锁</li><li>wait 和 notify 必须在 synchronized 代码块中使用</li></ul><p><strong>yield</strong></p><ul><li>暂停当前线程对象</li></ul><p><strong>join</strong></p><ul><li>join 方法是 Thread 的静态方法</li><li>等待调用 join 方法的线程结束，在继续执行</li></ul><hr><h4 id="3-对线程安全的理解"><a href="#3-对线程安全的理解" class="headerlink" title="3.对线程安全的理解"></a>3.对线程安全的理解</h4><p>当多个线程访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方法进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那么这个对象时线程安全的。</p><hr><h4 id="4-Thread、Runable-的区别"><a href="#4-Thread、Runable-的区别" class="headerlink" title="4.Thread、Runable 的区别"></a>4.Thread、Runable 的区别</h4><ul><li>Thread 的实现方式是继承</li><li>Runable 的实现方式是实现接口</li><li>Thread 实现了 Runable 接口，并进行了扩展</li></ul><hr><h4 id="5-对守护线程的理解"><a href="#5-对守护线程的理解" class="headerlink" title="5.对守护线程的理解"></a>5.对守护线程的理解</h4><p>守护线程是运行在后台的一种特殊进程。它独立于控制台，并且不会影响控制台的状态。守护线程的主要作用是负责系统的内存管理，以及系统的安全措施。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 守护线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;守护线程&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;);<br>        thread.setDaemon(<span class="hljs-literal">true</span>);<br>        thread.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="6-ThreadLocal-的原理和使用场景"><a href="#6-ThreadLocal-的原理和使用场景" class="headerlink" title="6.ThreadLocal 的原理和使用场景"></a>6.ThreadLocal 的原理和使用场景</h4><ul><li><a href="#ThreadLocal%E6%98%AF%E4%BB%80%E4%B9%88">ThreadLocal 是什么</a></li><li><a href="#ThreadLocal%E7%9A%84%E5%8E%9F%E7%90%86">ThreadLocal 的原理</a></li><li><a href="#ThreadLocal%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">ThreadLocal 的使用场景</a></li></ul><h6 id="ThreadLocal-是什么"><a href="#ThreadLocal-是什么" class="headerlink" title="ThreadLocal 是什么"></a>ThreadLocal 是什么</h6><p>ThreadLocal 的作用是给线程提供一个 作用域是<strong>整个线程</strong>，生命周期是<strong>线程存活时期</strong>的 **<em>线程局部变量</em>**。每个线程都可以通过 ThreadLocal 对象来访问属于自己的数据。总的来说有以下两个特点：</p><ol><li>线程内共享，线程运行到那里了都可以使用 ThreadLocal 中存储的变量</li><li>线程间隔离，线程只能看到自己存储在 ThreadLocal 中的变量，其他线程不能访问</li></ol><h6 id="ThreadLocal-的原理"><a href="#ThreadLocal-的原理" class="headerlink" title="ThreadLocal 的原理"></a>ThreadLocal 的原理</h6><p>ThreadLocal 的原理是：在线程中存储一个 ThreadLocal 对象，每个线程都有自己的 ThreadLocal 对象，每个线程都有自己的 ThreadLocal 对象中的变量。</p><p><strong>void set(T value)</strong><br>set 方法设置当前线程中 threadLocal 变量的值，该方法的源码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(T value)</span> &#123;<br>  <span class="hljs-comment">//1. 获取当前线程实例对象</span><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br><br>  <span class="hljs-comment">//2. 通过当前线程实例获取到ThreadLocalMap对象</span><br>    <span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br><br>    <span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>)<br><span class="hljs-comment">//3. 如果Map不为null,则以当前threadLocl实例为key,值为value进行存入</span><br>    map.set(<span class="hljs-built_in">this</span>, value);<br>    <span class="hljs-keyword">else</span><br><span class="hljs-comment">//4.map为null,则新建ThreadLocalMap并存入value</span><br>      createMap(t, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>value 值被存放在 <strong>ThreadLocalMap</strong> 里，由每个 Thread 各自维护，每个 Thread 都有自己的 ThreadLocalMap，每个 Thread 都有自己的 ThreadLocalMap 中的变量。</p><h6 id="ThreadLocal-的使用场景"><a href="#ThreadLocal-的使用场景" class="headerlink" title="ThreadLocal 的使用场景"></a>ThreadLocal 的使用场景</h6><ol><li>ThreadLocal 不是用来解决共享对象的多线程访问问题。</li><li>ThreadLocal 是让每个不同的线程拥有属于自己的数据容器（ ** ThreadLocalMap ** ）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocalDemo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;SimpleDateFormat&gt; sdf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            executorService.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DateUtil</span>(<span class="hljs-string">&quot;2019-11-25 09:00:&quot;</span> + i % <span class="hljs-number">60</span>));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateUtil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>        <span class="hljs-keyword">private</span> String date;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">DateUtil</span><span class="hljs-params">(String date)</span> &#123;<br>            <span class="hljs-built_in">this</span>.date = date;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (sdf.get() == <span class="hljs-literal">null</span>) &#123;<br>                sdf.set(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> sdf.get().parse(<span class="hljs-built_in">this</span>.date);<br>                    System.out.println(date);<br>                &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="7-ThreadLocal内存泄漏的原因，如何避免"><a href="#7-ThreadLocal内存泄漏的原因，如何避免" class="headerlink" title="7.ThreadLocal内存泄漏的原因，如何避免"></a>7.ThreadLocal内存泄漏的原因，如何避免</h4><h6 id="内存泄漏的原因"><a href="#内存泄漏的原因" class="headerlink" title="内存泄漏的原因"></a>内存泄漏的原因</h6><p>ThreadLocal 数据实际上是存放在其内部类 ThreadLocalMap里面。 ThreadLocal 的get、set、remove方法，实际上是调用 ThreadLocalMap 的 getEntry、setEntry、removeEntry 方法。</p><p>ThreadLocalMap内部通过一个Entry类型的table数组来维护数据。</p><p>Entry中的key是弱引用，当threadLocal外部强引用被置为null(threadLocalInstance&#x3D;null),那么系统 GC 的时候，根据可达性分析，这个threadLocal实例就没有任何一条链路能够引用到它，这个ThreadLocal势必会被回收，这样一来，ThreadLocalMap中就会出现key为null的Entry，就没有办法访问这些key为null的Entry的value，如果当前线程再迟迟不结束的话，这些key为null的Entry的value就会一直存在一条强引用链：<br><code>Thread Ref -&gt; Thread -&gt; ThreaLocalMap -&gt; Entry -&gt; value</code><br>永远无法回收，造成内存泄漏。</p><h6 id="避免"><a href="#避免" class="headerlink" title="避免"></a>避免</h6><p><strong>每次使用完线程数据，都要调用一次ThreadLocal.remove()方法手动删除Entry对象</strong></p><hr><h4 id="8-并发、并行、串行的区别"><a href="#8-并发、并行、串行的区别" class="headerlink" title="8.并发、并行、串行的区别"></a>8.并发、并行、串行的区别</h4><ul><li>串行：时间上不可重叠发生，前一个任务还没完成，下一个任务只能等待；</li><li>并行：时间上可以重叠，多个任务在<strong>同一时刻</strong>互补干扰的同时执行；</li><li>并发：多个任务在<strong>同一时期内</strong>同时发生执行；</li></ul><hr><h4 id="9-并发的三大特性"><a href="#9-并发的三大特性" class="headerlink" title="9.并发的三大特性"></a>9.并发的三大特性</h4><ul><li><strong>原子性：</strong><br>原子性值指一个操作是不可分割、不可中断的要么全部执行并且执行的过程不会被任何因素打断，要么全部不执行。</li><li><strong>可见性：</strong><br>可见性指的是一个线程修改了某一个共享变量时，其他线程能够立即知道这个修改。</li><li><strong>有序性：</strong><br>有序性指的是一个线程的执行代码，从前往后执行，单线程下可以认为是有序的，但是并发时可能发生指令重排。</li></ul><hr><h4 id="10-volatile"><a href="#10-volatile" class="headerlink" title="10.volatile"></a>10.volatile</h4><ul><li>保证变量的内存可见性</li><li>禁止volaite变量与其他变量的指令重排序</li></ul><p><strong>PS：重排序：为优化程序性能，对原有的指令执行顺序进行优化重新排序。重排序可能发生在多个阶段，比如编译重排序、CPU重排序等。</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-多线程-02</title>
    <link href="/posts/6326.html"/>
    <url>/posts/6326.html</url>
    
    <content type="html"><![CDATA[<h1 id="Java-学习-多线程-02"><a href="#Java-学习-多线程-02" class="headerlink" title="Java 学习-多线程-02"></a>Java 学习-多线程-02</h1><h4 id="1-为什么使用线程池，解释一下线程池参数"><a href="#1-为什么使用线程池，解释一下线程池参数" class="headerlink" title="1.为什么使用线程池，解释一下线程池参数"></a>1.为什么使用线程池，解释一下线程池参数</h4><p>为什么使用线程池：</p><ol><li>创建和销毁现场需要消耗系统资源，线程池可以<strong>复用已创建的线程</strong>。</li><li><strong>控制并发的数量</strong>。并发数量过多，可能会消耗过的的资源，从而造成服务器崩溃。（主要原因）</li><li>可以对线程做同一管理。</li></ol><p>参数：<br>Java 中的线程池顶层接口是 <code>Executor</code>接口，<code>ThreadPoolExecutor</code>是这个接口的实现类。<br><code>ThreadPoolExecutor</code>一共由四个构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 五个参数的构造函数</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">                          TimeUnit unit,</span><br><span class="hljs-params">                          BlockingQueue&lt;Runnable&gt; workQueue)</span><br><br><span class="hljs-comment">// 六个参数的构造函数-1</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">                          TimeUnit unit,</span><br><span class="hljs-params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-params">                          ThreadFactory threadFactory)</span><br><br><span class="hljs-comment">// 六个参数的构造函数-2</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">                          TimeUnit unit,</span><br><span class="hljs-params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-params">                          RejectedExecutionHandler handler)</span><br><br><span class="hljs-comment">// 七个参数的构造函数</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">                          TimeUnit unit,</span><br><span class="hljs-params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-params">                          ThreadFactory threadFactory,</span><br><span class="hljs-params">                          RejectedExecutionHandler handler)</span><br></code></pre></td></tr></table></figure><p>总共设计到 5 ～ 7 个参数，其中 5 个必要参数：</p><ul><li><p><strong>int corePoolSize:</strong> 该线程池中<strong>核心线程</strong>数最大值</p><blockquote><p>核心线程:线程池中有两类线程，核心线程和非核心线程。核心线程默认情况下会一直存在于线程池中，即使这个核心线程什么都不干，而非核心线程如果长时间闲置，就会被销毁。</p></blockquote></li><li><p><strong>int maximumPoolSize:</strong> 该线程池中<strong>线程总数</strong>最大值。</p><blockquote><p>等于核心线程数+非核心线程数。</p></blockquote></li><li><p><strong>int keepAliveTime:</strong> 非核心线程闲置超时时长</p><blockquote><p>非核心线程如果处于闲置状态超过该值，就会被销毁。如果设置 allowCoreThreadTimeOut(true)，则会也作用于核心线程。如果非核心线程闲置超过 keepAliveTime，就会被销毁。</p></blockquote></li><li><p><strong>TimeUnit unit:</strong> keepAliveTime 的时间单位<br>枚举类型，</p><blockquote><p>MICROSECONDS<br>MILLISECONDS<br>SECONDS<br>MINUTES<br>HOURS<br>DAYS</p></blockquote></li><li><p><strong>BlockingQueue workQueue：</strong> 阻塞队列，维护着等待执行的 Runnable 任务对象。</p></li></ul><p>常见的几个阻塞队列：</p><ol><li>LinkedBlockingQueue<br>链式阻塞队列，底层数据结构是链表，默认大小是 Integer.MAX_VALUE，可以指定大小</li><li>ArrayBlockingQueue<br>数组阻塞队列，底层数据结构是数组，需要指定队列大小。</li><li>SynchronousQueue<br>同步队列，内部容量为 0，每个 put 操作必须等待一个 take 操作，反之亦然。</li><li>DelayQueue<br>延迟队列，该队列中的元素只有当其指定延迟的时间到了，才能狗从队列获取该元素。</li></ol><p>2 个非必要参数：</p><ul><li><strong>ThreadFactory threadFactory：</strong><br>创建线程的工程，用于批量创建线程，统一在创建线程时设置一些参数，如是否守护线程、线程的优先级等，如果不指定，会新建一个默认的线程工厂。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultThreadFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ThreadFactory</span> &#123;<br>    <span class="hljs-comment">// 省略属性</span><br>    <span class="hljs-comment">// 构造函数</span><br>    DefaultThreadFactory() &#123;<br>        <span class="hljs-type">SecurityManager</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> System.getSecurityManager();<br>        group = (s != <span class="hljs-literal">null</span>) ? s.getThreadGroup() :<br>        Thread.currentThread().getThreadGroup();<br>        namePrefix = <span class="hljs-string">&quot;pool-&quot;</span> +<br>            poolNumber.getAndIncrement() +<br>            <span class="hljs-string">&quot;-thread-&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 省略</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>RejectedExecutionHandler handler:</strong><br>拒绝处理策略，线程数量大于最大线程数时，会采用拒绝处理策略。四种拒绝处理策略：</li></ul><ol><li><strong>ThreadPoolExecutor.AbortPolicy:</strong>  默认拒绝处理策略，丢弃任务并抛出RejectedExecutionException异常。</li><li><strong>ThreadPoolExecutor.DiscardPolicy:</strong> 丢弃任务，但是不抛出异常。</li><li><strong>ThreadPoolExecutor.DiscardOldestPolicy:</strong> 丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）。</li><li><strong>ThreadPoolExecutor.CallerRunsPolicy:</strong> 由调用线程处理该任务。</li></ol><hr><h4 id="2-简述线程池处理流程"><a href="#2-简述线程池处理流程" class="headerlink" title="2.简述线程池处理流程"></a>2.简述线程池处理流程</h4><p>处理任务的核心方法是 <code>execute</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// JDK 1.8</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Runnable command)</span> &#123;<br>    <span class="hljs-keyword">if</span> (command == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ctl.get();<br>    <span class="hljs-comment">// 1.当前线程数小于corePoolSize,则调用addWorker创建核心线程执行任务</span><br>    <span class="hljs-keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;<br>       <span class="hljs-keyword">if</span> (addWorker(command, <span class="hljs-literal">true</span>))<br>           <span class="hljs-keyword">return</span>;<br>       c = ctl.get();<br>    &#125;<br>    <span class="hljs-comment">// 2.如果不小于corePoolSize，则将任务添加到workQueue队列。</span><br>    <span class="hljs-keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">recheck</span> <span class="hljs-operator">=</span> ctl.get();<br>        <span class="hljs-comment">// 2.1 如果isRunning返回false(状态检查)，则remove这个任务，然后执行拒绝策略。</span><br>        <span class="hljs-keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))<br>            reject(command);<br>            <span class="hljs-comment">// 2.2 线程池处于running状态，但是没有线程，则创建线程</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (workerCountOf(recheck) == <span class="hljs-number">0</span>)<br>            addWorker(<span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>);<br>    &#125;<br>    <span class="hljs-comment">// 3.如果放入workQueue失败，则创建非核心线程执行任务，</span><br>    <span class="hljs-comment">// 如果这时创建非核心线程失败(当前线程总数不小于maximumPoolSize时)，就会执行拒绝策略。</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!addWorker(command, <span class="hljs-literal">false</span>))<br>         reject(command);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ctl.get()</code>是获取线程池状态，用 <code>int</code>类型表示。第二步中，入队前进行了一次 <code>isRunning</code>判断，入队之后，又进行了一次 <code>isRunning</code>判断。</p><p><strong>为什么要二次检查线程池的状态?</strong><br>在多线程的环境下，线程池的状态是时刻发生变化的。很有可能刚获取线程池状态后线程池状态就改变了。判断是否将command加入workqueue是线程池之前的状态。<strong>倘若没有二次检查，万一线程池处于非RUNNING状态（在多线程环境下很有可能发生），那么command永远不会执行。</strong></p><p><strong>流程总结：</strong></p><ol><li>线程总数量 &lt; corePoolSize，无论线程是否空闲，都会新建一个核心线程执行任务（让核心线程数量快速达到corePoolSize，在核心线程数量 &lt; corePoolSize时）。注意，这一步需要获得全局锁。</li><li>线程总数量 &gt;&#x3D; corePoolSize时，新来的线程任务会进入任务队列中等待，然后空闲的核心线程会依次去缓存队列中取任务来执行（体现了线程复用）。</li><li>当缓存队列满了，说明这个时候任务已经多到爆棚，需要一些“临时工”来执行这些任务了。于是会创建非核心线程去执行这个任务。注意，这一步需要获得全局锁。</li><li>缓存队列满了， 且总线程数达到了maximumPoolSize，则会采取上面提到的拒绝策略进行处理。</li></ol><p>整个过程如图所示：<br><img src="/../imgs/6326/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p><hr><h4 id="3-线程池中阻塞队列的作用，为什么时先添加队列而不是先创建最大线程数？"><a href="#3-线程池中阻塞队列的作用，为什么时先添加队列而不是先创建最大线程数？" class="headerlink" title="3.线程池中阻塞队列的作用，为什么时先添加队列而不是先创建最大线程数？"></a>3.线程池中阻塞队列的作用，为什么时先添加队列而不是先创建最大线程数？</h4><ul><li><strong>作用：</strong><br>一般队列只能保证有限长度的缓冲区，当队列满了，就会抛出异常；阻塞队列可以通过阻塞，保存当前想继续加入的任务；当阻塞队列中没有任务时，阻塞队列获取线程，使得核心线程进去wait状态，释放cpu资源。</li><li><strong>为什么先添加队列而不是先创建最大线程数？</strong><br>在创建新线程的时候，是要获取全局锁的，这个时候其他的就得阻塞，影响了整体效率。</li></ul><hr><h4 id="4-线程池中线程复用的原理"><a href="#4-线程池中线程复用的原理" class="headerlink" title="4.线程池中线程复用的原理"></a>4.线程池中线程复用的原理</h4><p><code>ThreadPoolExecutor</code>在创建线程时，会将线程封装成<strong>工作线程worker</strong>,并放入工作线程组中，然后这个worker反复从阻塞队列中拿任务去执行。</p><p>这里的 <code>addWorker</code>方法是在上面提到的 <code>execute</code>方法里面调用的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ThreadPoolExecutor.addWorker方法源码上半部分</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addWorker</span><span class="hljs-params">(Runnable firstTask, <span class="hljs-type">boolean</span> core)</span> &#123;<br>    retry:<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ctl.get();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> runStateOf(c);<br><br>        <span class="hljs-comment">// Check if queue empty only if necessary.</span><br>        <span class="hljs-keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;<br>            ! (rs == SHUTDOWN &amp;&amp;<br>               firstTask == <span class="hljs-literal">null</span> &amp;&amp;<br>               ! workQueue.isEmpty()))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">wc</span> <span class="hljs-operator">=</span> workerCountOf(c);<br>            <span class="hljs-keyword">if</span> (wc &gt;= CAPACITY ||<br>                <span class="hljs-comment">// 1.如果core是ture,证明需要创建的线程为核心线程，则先判断当前线程是否大于核心线程</span><br>                <span class="hljs-comment">// 如果core是false,证明需要创建的是非核心线程，则先判断当前线程数是否大于总线程数</span><br>                <span class="hljs-comment">// 如果不小于，则返回false</span><br>                wc &gt;= (core ? corePoolSize : maximumPoolSize))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> (compareAndIncrementWorkerCount(c))<br>                <span class="hljs-keyword">break</span> retry;<br>            c = ctl.get();  <span class="hljs-comment">// Re-read ctl</span><br>            <span class="hljs-keyword">if</span> (runStateOf(c) != rs)<br>                <span class="hljs-keyword">continue</span> retry;<br>            <span class="hljs-comment">// else CAS failed due to workerCount change; retry inner loop</span><br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>上半部分主要是判断线程数量是否超出阈值，超过了就返回false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">// ThreadPoolExecutor.addWorker方法源码下半部分</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">workerStarted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">workerAdded</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">Worker</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 1.创建一个worker对象</span><br>        w = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(firstTask);<br>        <span class="hljs-comment">// 2.实例化一个Thread对象</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> w.thread;<br>        <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 3.线程池全局锁</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">mainLock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mainLock;<br>            mainLock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// Recheck while holding lock.</span><br>                <span class="hljs-comment">// Back out on ThreadFactory failure or if</span><br>                <span class="hljs-comment">// shut down before lock acquired.</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> runStateOf(ctl.get());<br><br>                <span class="hljs-keyword">if</span> (rs &lt; SHUTDOWN ||<br>                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class="hljs-literal">null</span>)) &#123;<br>                    <span class="hljs-keyword">if</span> (t.isAlive()) <span class="hljs-comment">// precheck that t is startable</span><br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalThreadStateException</span>();<br>                    workers.add(w);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> workers.size();<br>                    <span class="hljs-keyword">if</span> (s &gt; largestPoolSize)<br>                        largestPoolSize = s;<br>                    workerAdded = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                mainLock.unlock();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (workerAdded) &#123;<br>                <span class="hljs-comment">// 4.启动这个线程</span><br>                t.start();<br>                workerStarted = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (! workerStarted)<br>            addWorkerFailed(w);<br>    &#125;<br>    <span class="hljs-keyword">return</span> workerStarted;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建 <code>worker</code>对象，并初始化一个 <code>Thread</code>对象，然后启动这个线程对象。</p><p><code>Worker</code>类部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Worker类部分源码</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">final</span> Thread thread;<br>    Runnable firstTask;<br><br>    Worker(Runnable firstTask) &#123;<br>        setState(-<span class="hljs-number">1</span>); <span class="hljs-comment">// inhibit interrupts until runWorker</span><br>        <span class="hljs-built_in">this</span>.firstTask = firstTask;<br>        <span class="hljs-built_in">this</span>.thread = getThreadFactory().newThread(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            runWorker(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <span class="hljs-comment">//其余代码略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Worker</code>类实现了 <code>Runnable</code>接口，所以 <code>Worker</code>也是一个线程任务。在构造方法中，创建了一个线程，线程的任务就是自己。故 <code>addWorker</code>方法调用 <code>addWorker</code>方法源码下半部分中的第4步 <code>t.start</code>，会触发 <code>Worker</code>类的 <code>run</code>方法被JVM调用。</p><p>runWorker的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Worker.runWorker方法源代码</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runWorker</span><span class="hljs-params">(Worker w)</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">wt</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">Runnable</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> w.firstTask;<br>    w.firstTask = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 1.线程启动之后，通过unlock方法释放锁</span><br>    w.unlock(); <span class="hljs-comment">// allow interrupts</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">completedAbruptly</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 2.Worker执行firstTask或从workQueue中获取任务，如果getTask方法不返回null,循环不退出</span><br>        <span class="hljs-keyword">while</span> (task != <span class="hljs-literal">null</span> || (task = getTask()) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 2.1进行加锁操作，保证thread不被其他线程中断（除非线程池被中断）</span><br>            w.lock();<br>            <span class="hljs-comment">// If pool is stopping, ensure thread is interrupted;</span><br>            <span class="hljs-comment">// if not, ensure thread is not interrupted.  This</span><br>            <span class="hljs-comment">// requires a recheck in second case to deal with</span><br>            <span class="hljs-comment">// shutdownNow race while clearing interrupt</span><br>            <span class="hljs-comment">// 2.2检查线程池状态，倘若线程池处于中断状态，当前线程将中断。</span><br>            <span class="hljs-keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||<br>                 (Thread.interrupted() &amp;&amp;<br>                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;<br>                !wt.isInterrupted())<br>                wt.interrupt();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 2.3执行beforeExecute</span><br>                beforeExecute(wt, task);<br>                <span class="hljs-type">Throwable</span> <span class="hljs-variable">thrown</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 2.4执行任务</span><br>                    task.run();<br>                &#125; <span class="hljs-keyword">catch</span> (RuntimeException x) &#123;<br>                    thrown = x; <span class="hljs-keyword">throw</span> x;<br>                &#125; <span class="hljs-keyword">catch</span> (Error x) &#123;<br>                    thrown = x; <span class="hljs-keyword">throw</span> x;<br>                &#125; <span class="hljs-keyword">catch</span> (Throwable x) &#123;<br>                    thrown = x; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(x);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-comment">// 2.5执行afterExecute方法</span><br>                    afterExecute(task, thrown);<br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                task = <span class="hljs-literal">null</span>;<br>                w.completedTasks++;<br>                <span class="hljs-comment">// 2.6解锁操作</span><br>                w.unlock();<br>            &#125;<br>        &#125;<br>        completedAbruptly = <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        processWorkerExit(w, completedAbruptly);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先去执行创建这个 <code>worker</code>时就有的任务，当执行完这个任务后，worker的生命周期并没有结束，在 <code>while</code>循环中，<code>worker</code>会不断地调用 <code>getTask</code>方法从<strong>阻塞队列</strong>中获取任务然后调用task.run()执行任务,从而达到复用线程的目的。只要 <code>getTask</code>方法不返回 <code>null</code>,此线程就不会退出。</p><p>当然，核心线程池中创建的线程想要拿到阻塞队列中的任务，先要判断线程池的状态，如果<strong>STOP</strong>或者<strong>TERMINATED</strong>，返回 <code>null</code>。</p><p><code>getTask</code>方法的实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Worker.getTask方法源码</span><br><span class="hljs-keyword">private</span> Runnable <span class="hljs-title function_">getTask</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">timedOut</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// Did the last poll() time out?</span><br><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ctl.get();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> runStateOf(c);<br><br>        <span class="hljs-comment">// Check if queue empty only if necessary.</span><br>        <span class="hljs-keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;<br>            decrementWorkerCount();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">wc</span> <span class="hljs-operator">=</span> workerCountOf(c);<br><br>        <span class="hljs-comment">// Are workers subject to culling?</span><br>        <span class="hljs-comment">// 1.allowCoreThreadTimeOut变量默认是false,核心线程即使空闲也不会被销毁</span><br>        <span class="hljs-comment">// 如果为true,核心线程在keepAliveTime内仍空闲则会被销毁。</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">timed</span> <span class="hljs-operator">=</span> allowCoreThreadTimeOut || wc &gt; corePoolSize;<br><span class="hljs-comment">// 2.如果运行线程数超过了最大线程数，但是缓存队列已经空了，这时递减worker数量。</span><br>　　　　 <span class="hljs-comment">// 如果有设置允许线程超时或者线程数量超过了核心线程数量，</span><br>        <span class="hljs-comment">// 并且线程在规定时间内均未poll到任务且队列为空则递减worker数量</span><br>        <span class="hljs-keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))<br>            &amp;&amp; (wc &gt; <span class="hljs-number">1</span> || workQueue.isEmpty())) &#123;<br>            <span class="hljs-keyword">if</span> (compareAndDecrementWorkerCount(c))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 3.如果timed为true(想想哪些情况下timed为true),则会调用workQueue的poll方法获取任务.</span><br>            <span class="hljs-comment">// 超时时间是keepAliveTime。如果超过keepAliveTime时长，</span><br>            <span class="hljs-comment">// poll返回了null，上边提到的while循序就会退出，线程也就执行完了。</span><br>            <span class="hljs-comment">// 如果timed为false（allowCoreThreadTimeOut为false</span><br>            <span class="hljs-comment">// 且wc &gt; corePoolSize为false），则会调用workQueue的take方法阻塞在当前。</span><br>            <span class="hljs-comment">// 队列中有任务加入时，线程被唤醒，take方法返回任务，并执行。</span><br>            <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> timed ?<br>                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :<br>                workQueue.take();<br>            <span class="hljs-keyword">if</span> (r != <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">return</span> r;<br>            timedOut = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException retry) &#123;<br>            timedOut = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>核心线程的会一直卡在<code>workQueue.take</code>方法，被阻塞并挂起，不会占用CPU资源，直到拿到Runnable 然后返回（当然如果<strong>allowCoreThreadTimeOut</strong>设置为<code>true</code>,那么核心线程就会去调用<code>poll</code>方法，因为<code>poll</code>可能会返回null,所以这时候核心线程满足超时条件也会被销毁）。</p><p>非核心线程会workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) ，如果超时还没有拿到，下一次循环判断<strong>compareAndDecrementWorkerCount</strong>就会返回null,<code>Worker</code>对象的run()方法循环体的判断为<code>null</code>,任务结束，然后线程被系统回收 。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-JVM-01</title>
    <link href="/posts/3217.html"/>
    <url>/posts/3217.html</url>
    
    <content type="html"><![CDATA[<h1 id="Java学习-JVM-01"><a href="#Java学习-JVM-01" class="headerlink" title="Java学习-JVM-01"></a>Java学习-JVM-01</h1><h4 id="1-Java类加载器"><a href="#1-Java类加载器" class="headerlink" title="1.Java类加载器"></a>1.Java类加载器</h4><p>类加载器就是加载所有类的工具，它加载的类在内存中只有一份，所以类加载器是单例的。也就是堆中的Class对象不可以重复加载</p><p>主要有以下四类：</p><ul><li><p>BootstrapClassLoader 启动类加载器：<br>加载&#x2F;lib下的jar包和类。由C++编写。</p></li><li><p>ExtenssionClassLoader 扩展类加载器：<br>加载&#x2F;lib&#x2F;ext下的jar包和类。由Java编写。</p></li><li><p>AppClassLoader 应用类加载器：<br>加载当前classPath下的jar包和类。由Java编写。</p></li><li><p>自定义类加载器：<br>通过继承<code>java.lang.ClassLoader</code>类，实现自定义类加载器。</p></li></ul><p><img src="/../imgs/3217/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png"></p><hr><h4 id="2-双亲委派模型"><a href="#2-双亲委派模型" class="headerlink" title="2.双亲委派模型"></a>2.双亲委派模型</h4><p>当类加载器收到一个类的加载请求时，它首先不会自己尝试去加载它，而是把这个请求委托给父类加载器去完成，这样层层委派，因此所有的加载请求最终都会传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求时，子加载器才会自己尝试去加载。</p><p>双亲委派模型的具体实现代码在 <code>java.lang.ClassLoader</code> 类中。此类的 <code>loadClass()</code> 方法是双亲委派模型的核心：先检查类是否已经加载过，如果没有则让父类加载器去加载。当父类加载器加载失败时会抛出 <code>ClassNotFoundException</code> 异常,此时再自己尝试加载。</p><p>如果没有双亲委派模型，而是由各个类加载器自行加载的话，内存里面可能会出现很多个相同的类，那么类之间的比较结果及类的唯一性将无法保证。</p><hr><h4 id="3-GC如何判断对象可以被回收"><a href="#3-GC如何判断对象可以被回收" class="headerlink" title="3.GC如何判断对象可以被回收"></a>3.GC如何判断对象可以被回收</h4><ul><li><p>引用计数法：<br>设置引用计数器，对象被引用时计数器加1，引用失效时计数器减1，当计数器为0时，对象可以被回收。会存在对象间循环引用的问题，一般不使用这种方法。</p></li><li><p>可达性分析：<br>通过GC Roots 的根对象作为起始节点，从这些节点开始，根据引用关系向下搜索，如果某个对象没有被搜索到，则会被标记为垃圾。可作为GC Roots的对象有：</p><ol><li>虚拟机栈和本地方法栈中引用的对象</li><li>类静态属性引用的对象</li><li>常量引用的对象</li></ol></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-基础-02</title>
    <link href="/posts/30825.html"/>
    <url>/posts/30825.html</url>
    
    <content type="html"><![CDATA[<h1 id="Java-学习-基础-02"><a href="#Java-学习-基础-02" class="headerlink" title="Java 学习-基础-02"></a>Java 学习-基础-02</h1><h4 id="11-什么是字节码？采用字节码的好处是什么"><a href="#11-什么是字节码？采用字节码的好处是什么" class="headerlink" title="11.什么是字节码？采用字节码的好处是什么"></a>11.什么是字节码？采用字节码的好处是什么</h4><ul><li><p>字节码：<br>Java 引入了虚拟机的概念，即在机器和 <strong>编译程序</strong> 之间，加入了一层抽象的虚拟机。 <strong>编译程序</strong> 只需面向虚拟机，生成虚拟机能理解的代码，然后由解释器将虚拟机代码转换成特定的机器代码来执行。这种虚拟机能理解的代码就是 <strong><em>字节码</em></strong> 。（即扩展名为 <code>.class</code> 的文件）。</p></li><li><p>采用字节码的好处：</p><ul><li>编译型语言效率比解释型语言高</li><li>字节码面向虚拟机，不针对任一操作系统，可以在任何操作系统上运行</li><li>在编译期间，编译器可以检查代码的正确性，并且可以提供更多的信息</li></ul></li></ul><hr><h4 id="12-Java-中的异常体系"><a href="#12-Java-中的异常体系" class="headerlink" title="12.Java 中的异常体系"></a>12.Java 中的异常体系</h4><p><strong>体系图</strong></p><p><img src="/../imgs/30825/%E4%BD%93%E7%B3%BB%E5%9B%BE.png"></p><p>Java 异常分为 **<em>Error（程序无法处理的错误）</em>**，和 **<em>Exception（程序本身可以处理的异常）</em>**。 这两类均继承 Throwable</p><p><strong>Error</strong> 常见的有 StackOverFlowError、OutOfMemoryError 等等。<br><strong>Exception</strong> 分为 <strong><em>运行时异常</em></strong> 和 <strong><em>编译时异常</em></strong> 。</p><ul><li><strong><em>运行时异常</em></strong><br>可以利用 <code>try catch</code> 捕获，也可以通过 <code>throws</code> 来声明。</li></ul><p>RuntimeException 是运行期异常，可以被捕获和处理。常见的 RuntimeException 有：</p><ul><li>NullPointerException 空指针异常</li><li>ArrayIndexOutOfBoundsException 数组越界异常</li><li>ArithmeticException 除数为 0 异常</li><li>ClassCastException 类型强制转换异常</li></ul><p><strong><em>编译时异常</em></strong> 必须处理，不处理的话，编译器会报错。<br>除 RuntimeException 以外的异常，都是编译时异常。在编译阶段 Java 编译器会检查此类异常并强制程序捕获和处理异常，即强制要求程序在可能出现此类异常的地方进行捕获和处理。常见的有：</p><ul><li>IOException 输入输出异常</li><li>InterruptedException 线程中断异常</li><li>ClassNotFoundException 类未找到异常</li><li>NoSuchMethodException 方法未找到异常</li><li>SQLException SQL 异常</li></ul><p><strong>throw和throws的区别</strong></p><ul><li>throw 一般是用在方法体内部，由开发者定义当程序语句出现问题后，抛出异常</li><li>throws 一般用于方法声明上，代表该方法可能会抛出的异常列表</li></ul><hr><h4 id="13"><a href="#13" class="headerlink" title="13"></a>13</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-集合-01</title>
    <link href="/posts/10146.html"/>
    <url>/posts/10146.html</url>
    
    <content type="html"><![CDATA[<h1 id="Java-学习-集合-01"><a href="#Java-学习-集合-01" class="headerlink" title="Java 学习-集合-01"></a>Java 学习-集合-01</h1><h4 id="1-List、Set、Map-的区别"><a href="#1-List、Set、Map-的区别" class="headerlink" title="1.List、Set、Map 的区别"></a>1.List、Set、Map 的区别</h4><table>    <tr>      <th colspan=2></th>      <th>元素有序</th>      <th>允许重复元素</th>    </tr>    <tr>      <td colspan=2>List</td>      <td>是</td>      <td>是</td>    </tr>    <tr>      <td rowspan=3>Set</td>      <td>AbstractSet</td>      <td rowspan=2>否</td>      <td rowspan=3>否</td>    </tr>    <tr>      <td>HashSet</td>    </tr>    <tr>      <td>TreeSet</td>      <td>是（用二叉树排序）</td>    </tr>    <tr>      <td rowspan=3>Map</td>      <td>AbstractMap</td>      <td rowspan=2>否</td>      <td rowspan=3>Key值必须唯一，Value可重复</td>    </tr>    <tr>      <td>HashMap</td>    </tr>    <tr>      <td>TreeMap</td>      <td>是（用二叉树排序）</td>    </tr>  </table><hr><h4 id="2-ArrayList-和-LinkedList-的区别"><a href="#2-ArrayList-和-LinkedList-的区别" class="headerlink" title="2.ArrayList 和 LinkedList 的区别"></a>2.ArrayList 和 LinkedList 的区别</h4><ul><li><strong>数据结构实现:</strong><br>ArrayList 是 <strong><em>动态数组</em></strong> 的数据结构实现；LinkedList 是 <strong><em>双向链表</em></strong> 的数据结构实现</li><li><strong>随机访问效率:</strong><br>ArrayList 比 LinkedList 快，因为 ArrayList 是动态数组，每次查询都会查询整个数组，而 LinkedList 是双向链表，是线性的数据存储方式，需要移动指针从前往后一次查找</li><li><strong>增加和删除效率:</strong><br>在首位的增加和删除操作，LinkedList 要比 ArrayList 效率高，因为 ArrayList 增删操作要影响数组内其他数据的下标，而 LinkedList 只需要移动指针即可</li></ul><hr><h4 id="3-HashMap-和-HashTable-有什么区别，其底层实现是什么"><a href="#3-HashMap-和-HashTable-有什么区别，其底层实现是什么" class="headerlink" title="3.HashMap 和 HashTable 有什么区别，其底层实现是什么"></a>3.HashMap 和 HashTable 有什么区别，其底层实现是什么</h4><ul><li><strong>线程安全：</strong><br>HashMap 非线程安全，HashTable 内部方法有 synchronized 处理是线程安全，但要保证线程安全，推荐使用 ConcurrentHashMap</li><li><strong>效率：</strong><br>由于线程安全问题，HashMap 比 HashTable 效率高,HashTable 基本被淘汰</li><li><strong>对 Null key 和 Null value 的支持：</strong><br>HashMap 支持 Null key 和 Null value；HashTable 不支持，会跑出空指针异常</li><li><strong>底层实现原理</strong><br>HashMap1.7 是数组+链表，1.8 是数组+链表+红黑树<br>HashTable 是数组+链表</li></ul><hr><h4 id="4-ConcurrentHashMap-原理，jdk7-和-jdk8-的区别"><a href="#4-ConcurrentHashMap-原理，jdk7-和-jdk8-的区别" class="headerlink" title="4.ConcurrentHashMap 原理，jdk7 和 jdk8 的区别"></a>4.ConcurrentHashMap 原理，jdk7 和 jdk8 的区别</h4><ul><li><strong>原理：</strong><br>JDK1.7版本，ConcurrentHashMap内部使用 <em><strong>段（Segment）</strong></em> ，ConcurrentLevel有16个分段，这16个分段有独立的锁机制，每个独立的机制都是一张表，表的下面是链表，这样就可以支持并发的同时保证每张表的线程安全，提高效率</li></ul><p>JDK1.8版本，ConcurrentHashMap内部使用synchronized + volatile + CAS 的实现，降低锁的粒度，提高效率</p><ul><li><strong>区别：</strong><ul><li>JDK1.8的实现降低锁的粒度，JDK1.7版本锁的粒度是基于Segment的，包含多个HashEntry，而JDK1.8锁的粒度就是HashEntry（首节点）</li><li>JDK1.8版本的数据结构变得更加简单，使得操作更加清晰流畅。因为已经使用synchronized来进行同步，所以不需要分段锁的概念，也就不需要Segment这种数据结构，由于粒度的降低，实现的复杂度也增加了</li><li>JDK1.8使用红黑树来优化链表，基于长度很长的链表的遍历是一个很漫长的过程，而红黑树的遍历效率是很快的，代替一定阈值的链表，这样效率更高</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>学习</tag>
      
      <tag>八股文</tag>
      
      <tag>集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo文章的相关操作</title>
    <link href="/posts/60892.html"/>
    <url>/posts/60892.html</url>
    
    <content type="html"><![CDATA[<h3 id="传统创建文章的方式"><a href="#传统创建文章的方式" class="headerlink" title="传统创建文章的方式"></a>传统创建文章的方式</h3><figure class="highlight gauss"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="创建草稿"><a href="#创建草稿" class="headerlink" title="创建草稿"></a>创建草稿</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> draft &lt;<span class="hljs-built_in">title</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="预览草稿"><a href="#预览草稿" class="headerlink" title="预览草稿"></a>预览草稿</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">hexo s <span class="hljs-comment">--draft</span><br></code></pre></td></tr></table></figure><h3 id="发布草稿"><a href="#发布草稿" class="headerlink" title="发布草稿"></a>发布草稿</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">hexo P <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="生产静态文件"><a href="#生产静态文件" class="headerlink" title="生产静态文件"></a>生产静态文件</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br></code></pre></td></tr></table></figure><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>草稿</tag>
      
      <tag>发布</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习-基础</title>
    <link href="/posts/60906.html"/>
    <url>/posts/60906.html</url>
    
    <content type="html"><![CDATA[<h1 id="Java-学习-基础-01"><a href="#Java-学习-基础-01" class="headerlink" title="Java 学习-基础-01"></a>Java 学习-基础-01</h1><h4 id="1-什么是面向对象，面向对象和面向过程的区别"><a href="#1-什么是面向对象，面向对象和面向过程的区别" class="headerlink" title="1. 什么是面向对象，面向对象和面向过程的区别"></a>1. 什么是面向对象，面向对象和面向过程的区别</h4><p>面向对象和面向过程都是一种软件开发思想。</p><p><strong>什么是面向对象：</strong> 面向对象是把构成问题事物分解成各个对象，分别设计这些对象，然后将它们组装成完整功能的系统。</p><p><strong>区别：</strong> 面向过程分析出解决问题的步骤，用函数按步骤实现，使用时依次调用就函数；面向对象时用类实现各个功能模块。</p><hr><h4 id="2-面向对象三大特性"><a href="#2-面向对象三大特性" class="headerlink" title="2.面向对象三大特性"></a>2.面向对象三大特性</h4><ul><li><a href="######%E5%B0%81%E8%A3%85">封装</a></li><li><a href="######%E7%BB%A7%E6%89%BF">继承</a></li><li><a href="######%E5%A4%9A%E6%80%81">多态</a></li></ul><h6 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h6><p>利用 <strong>抽象数据类型</strong> 将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在 <strong>抽象数据类型</strong> 的内部，尽可能地隐藏内部细节，只保留一些对外接口使之与外部发生联系。用户无需知道对象内部的细节，但可以通过对象对外提供的接口访问该对象。</p><p><strong><em>优点：</em></strong></p><ul><li>减少耦合：可以独立地开发、测试、优化、使用、理解和修改</li><li>减轻维护的负担：可以更容易被程序员理解，并且在调试的时候可以不影响其他模块</li><li>有效的调节性能：可以通过剖析确定哪些模块影响了系统的性能</li><li>提高软件的可重用性</li><li>降低了构建大型系统的风险：即使整个系统不可用，但是这些独立的模块却有可能是可用的</li></ul><h6 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h6><p>继承就是子类继承父类的特征和行为，使得子类（派生类）可以从父类（基类）继承特征和行为，从而使得子类（派生类）可以复用父类（基类）的代码。</p><figure class="highlight csharp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//  父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;吃东西&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//  子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-title">extend</span> <span class="hljs-title">Animal</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;猫吃东西&quot;</span>);<br>    &#125;<br>&#125;<br><br>Anilmal animal = <span class="hljs-keyword">new</span> Cat();<br><br></code></pre></td></tr></table></figure><p><strong>继承的特性</strong></p><ul><li>子类拥有父类非私有的属性和方法</li><li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展</li><li>子类可以用自己的方式实现父类的方法，即子类可以覆盖父类的方法</li><li>子类可以继承父类的构造函数，子类可以用自己的构造函数来覆盖父类的构造函数</li><li>Java 的继承是单继承</li><li>提高了类之间的耦合度，使得类之间的关系更加清晰</li></ul><h6 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h6><p>多态分为<strong>编译时多态</strong>和<strong>运行时多态</strong></p><ul><li>编译时多态主要指方法的重载，即方法的重写</li><li>运行时多态，指的是程序中定义的对象引用所指向的具体类型，在运行期间才确定。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;吃东西&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//  子类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> extend Animal&#123;<br>    <span class="hljs-comment">//  编译时多态</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫吃东西&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">Anilmal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br><span class="hljs-comment">//  运行时多态</span><br>animal.eat();<br><br></code></pre></td></tr></table></figure><hr><h4 id="3-JDK-JRE-JVM"><a href="#3-JDK-JRE-JVM" class="headerlink" title="3.JDK JRE JVM"></a>3.JDK JRE JVM</h4><p><strong><em>JDK</em></strong> Java Development Kit,即 Java 开发工具包，用于编译 Java 程序<br><strong><em>JRE</em></strong> Java Runtime Environment,即 Java 运行环境，用于运行 Java 程序<br><strong><em>JVM</em></strong> Java Virtual Machine,即 Java 虚拟机,是 Java 实现跨平台最核心的部分。用于运行 Java 程序。</p><hr><h4 id="4-x3D-x3D-和-equals-比较"><a href="#4-x3D-x3D-和-equals-比较" class="headerlink" title="4.&#x3D;&#x3D;和 equals 比较"></a>4.&#x3D;&#x3D;和 equals 比较</h4><p>&#x3D;&#x3D; 对于基本类型是值的比较，对于引用类型是地址的比较<br>equals 默认是引用比较，但很多类会重写 equals 方法，使之成为值的比较，如 String，Integer，Double 等。</p><hr><h4 id="5-hashCode-和-equals"><a href="#5-hashCode-和-equals" class="headerlink" title="5.hashCode 和 equals"></a>5.hashCode 和 equals</h4><p>结论：</p><ul><li>hashCode 相等，equals 不一定相等</li><li>hashCode 不相等，equals 一定不相等</li><li>equals 相等，hashCode 一定相等</li><li>equals 不相等，hashCode 一定不相等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">aInt</span> <span class="hljs-operator">=</span> <span class="hljs-number">97</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">aStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<br><br>System.out.println(aInt.hashCode());<br>System.out.println(aStr.hashCode());<br><br></code></pre></td></tr></table></figure><p>输出值都是 <code>97</code></p><p><strong>重写 equals 必须重写 hashCode</strong>:需要遵循 <strong>equals 相等，hashCode 一定相等</strong></p><hr><h4 id="6-final"><a href="#6-final" class="headerlink" title="6.final"></a>6.final</h4><ul><li>final 关键字，用于修饰类，方法，属性，变量，表达式，类型等</li><li>final 修饰的累叫做<strong>最终类</strong>，该累不能被继承（String）</li><li>final 修饰的方法不能被重写</li><li>final 修饰的变量叫常量，必须初始化，不能被修改</li></ul><hr><h4 id="7-String、StringBuffer、StringBuilder"><a href="#7-String、StringBuffer、StringBuilder" class="headerlink" title="7.String、StringBuffer、StringBuilder"></a>7.String、StringBuffer、StringBuilder</h4><p>String: 字符串类，用于存储字符串，不可变，线程安全<br>StringBuffer: 字符串缓冲区，用于存储字符串，可变，线程安全<br>StringBuilder: 字符串构造器，用于存储字符串，可变，线程不安全</p><p>StringBuffer 实现方法里，通过使用 Syncronized 来保证线程安全<br>StringBuilder 没有使用 Syncronized，线程不安全</p><hr><h4 id="8-基础数据类型"><a href="#8-基础数据类型" class="headerlink" title="8.基础数据类型"></a>8.基础数据类型</h4><p>基础数据类型: byte, short, int, long, float, double, char, boolean<br>自动转型是从低到高、高到低必须强转。</p><hr><h4 id="9-重载和重写的区别"><a href="#9-重载和重写的区别" class="headerlink" title="9.重载和重写的区别"></a>9.重载和重写的区别</h4><ul><li>重写(Override)：</li></ul><p>方法名相同，方法参数相同，返回类型相同。一个在父类，一个在子类。</p><ul><li>重载(Overload)：</li></ul><p>方法名相同，方法参数不相同，返回值可以不同，用于同一类内。</p><hr><h4 id="10-接口和抽象类的区别"><a href="#10-接口和抽象类的区别" class="headerlink" title="10.接口和抽象类的区别"></a>10.接口和抽象类的区别</h4><p><strong><em>抽象类：</em></strong><br>抽象类是用来描述抽象行为的。比如 Animal，我们并不知道具体会有哪些行为，只有具体的动物，如 Cat、Dog 才具有行为，才能够被实例化。抽象类是<strong>实现多态的一种机制</strong>，它可以包含具体的方法。也可以包含抽象方法，而继承它的子类必须实现这些抽线方法。<br>抽象类具有一下特性：</p><ol><li>抽象类不能被实例化，但可以有构造函数</li><li>抽象方法必须由子类进行重写</li><li>只要包含一个抽象方法，就必须定义为抽象类</li><li>抽象类中可以包含具体的方法，也可以不包含抽象方法</li><li>抽象类可以包含普通的成员变量</li><li>抽象类也可以包含静态成员变量</li><li>子类中的抽象方法，不能与父类的抽象方法相同</li><li>abstract 不能与 private、static、final、native 共同使用</li></ol><p><strong><em>接口：</em></strong><br>接口通过 interface 关键字实现，接口不是类，因此不能实例化。实现类实现接口，必须实现接口所有方法。</p><p>接口是抽象类的延伸，Java 不能多重继承，但是可以多重实现接口。<br>接口有一下特性：</p><ol><li>接口中不能有构造方法</li><li>接口的所有方法自动被声明为 public，而且只能是 public，使用其他会导致编译错误</li><li>接口可以定义“成员变量”，而且会自动转化</li><li>接口所有方法都是抽象的，不能有方法体，也不能包含静态方法</li><li>实现接口的非抽象类必须实现接口的所有方法，而抽象类不用</li><li>不能使用new关键字实例化接口，因为接口是不能实例化的</li><li>在实现多接口的时候，一定要注意方法名的重复，否则会导致编译错误</li></ol><p><em><strong>总结：</strong></em></p><ol><li>抽象类是一种继承管理，一个类只能有一个父类，但可以有多个接口</li><li>在抽象类中可以拥有自己的成员变量和非抽象方法，但接口只能存在静态的不可变的成员数据，切接口的所有方法都是抽象的。</li><li>抽象类和接口所反映的设计理念是不同的。抽象类代表的是“is-a”关系，而接口代表的是“like-a”的关系。</li></ol><hr>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>基础</tag>
      
      <tag>学习</tag>
      
      <tag>八股文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub Pages + Hexo 搭建</title>
    <link href="/posts/15719.html"/>
    <url>/posts/15719.html</url>
    
    <content type="html"><![CDATA[<h1 id="GitHub-Pages-Hexo-搭建"><a href="#GitHub-Pages-Hexo-搭建" class="headerlink" title="GitHub Pages + Hexo 搭建"></a>GitHub Pages + Hexo 搭建</h1><h2 id="1-GitHub-Pages-部分"><a href="#1-GitHub-Pages-部分" class="headerlink" title="1 GitHub Pages 部分"></a>1 GitHub Pages 部分</h2><p>1.1  新建仓库</p><p><img src="/../imgs/15719/2022-04-13%2016.39.16.png"></p><p><strong>注</strong><br>仓库名称和用户名一样的话，Pages的Url会是 YourName.github.io<br>如果不一样的话，则会是 YourName.github.io&#x2F;仓库名</p><p><strong>要选择Public</strong></p><p>1.2 修改仓库为Pages<br><img src="/../imgs/15719/2022-04-13%2016.41.41.png"></p><p>修改source对应的分支</p><p><img src="/../imgs/15719/2022-04-13%2016.43.50.png"></p><hr><h2 id="2-Hexo"><a href="#2-Hexo" class="headerlink" title="2 Hexo"></a>2 Hexo</h2><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>安装完后，初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init 文件目录<br><span class="hljs-built_in">cd</span> 文件目录<br>yarn<br></code></pre></td></tr></table></figure><h3 id="配置仓库地址"><a href="#配置仓库地址" class="headerlink" title="配置仓库地址"></a>配置仓库地址</h3><p>修改根目录下的  <strong>_config.yml</strong> 文件</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> 仓库地址<br><span class="hljs-symbol">  branch:</span> 分支<br></code></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-number">1</span> 构建静态文件<br>hexo g<br><br><span class="hljs-number">2</span> 清除本地静态文件<br>hexo <span class="hljs-built_in">clean</span><br><br><span class="hljs-number">3</span> 本地服务<br>hexo s<br><br><span class="hljs-number">4</span> 部署到Pages<br>hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Pages</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World!</title>
    <link href="/posts/22462.html"/>
    <url>/posts/22462.html</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
